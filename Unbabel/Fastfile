fastlane_version "2.26.0"

default_platform :ios

platform :ios do

  commit = last_git_commit
  is_ci = is_ci?
  run_location = is_ci ? 'CI' : ENV['USER']

  before_all do |lane, options|
    if !options[:force] && lane_context[SharedValues::LANE_NAME].start_with?("itunes")
      ensure_git_status_clean
    end
    slack_msg(msg: "#{run_location} running fastlane #{lane_context[SharedValues::LANE_NAME]}", success: true)
  end

  # Testing
  desc "Runs all the unit and UI tests"
  lane :test do
    scan(skip_slack: !is_ci)
  end

  desc "Uploads the code coverage to codecov.io"
  lane :codecov do
    path = root_sh(command: "pwd").strip
    derived_data = "#{path}/.build/DerivedData"
    root_sh(command:"curl -s http://codecov.io/bash | bash -s -- -c -J '^Unbabel$' -D '#{derived_data}'")
  end

  # Deployment
  desc "Submit a new Beta Build to Fabric"
  lane :fabric do |options|
    schemes = options[:scheme] != nil ? [options[:scheme]] : [mobile_scheme, production_scheme, staging_scheme]
    build_number = increment_build_number
    schemes.each do |scheme|
        build_fabric(scheme: scheme, groups: fabric_groups_for_scheme(scheme))
    end
    commit_push_tag(build_number: build_number, build_type: "beta")
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  lane :itunes do |options|
    build_number = increment_build_number
    build_itunes(scheme: appstore_scheme)
    commit_push_tag(build_number: build_number, build_type: "release")
  end

  # Certificates
  desc "Installs all certificates"
  lane :install_certs do
    match(type: "development",
          app_identifier: all_app_ids,
          readonly: true)
    match(type: "adhoc",
          app_identifier: all_app_ids,
          readonly: true)
    match(type: "appstore",
          app_identifier: all_app_ids,
          readonly: true)
  end

  desc "Add certificates for a specified environment through :env"
  lane :create_certs do |options|
    if options[:env] == "development" or !options[:env]
      match(type: "development", app_identifier: all_app_ids, force_for_new_devices: true)
    end
    if options[:env] == "adhoc" or !options[:env]
      match(type: "adhoc", app_identifier: all_app_ids, force_for_new_devices: true)
    end
    if options[:env] == "appstore" or !options[:env]
      match(type: "appstore", app_identifier: all_app_ids)
    end
  end

  lane :refresh_dsyms do |options|
    clean_build_artifacts
    download_dsyms(version: options[:version])
    upload_symbols_to_crashlytics
    clean_build_artifacts
  end

  # Private Lanes
  desc "Commit and push tag"
  private_lane :commit_push_tag do |options|
    build_number_bump(build_number: options[:build_number])
    tag(build_type: options[:build_type])
  end

  private_lane :build_fabric do |options|
    scheme = options[:scheme]
    match(type: "adhoc",
      app_identifier: app_id_for_scheme(scheme),
      force_for_new_devices: true)
    gym(configuration: "Adhoc", scheme: options[:scheme])
    upload_fabric(groups: options[:groups])
  end

  private_lane :upload_fabric do |options|
    crashlytics(
      api_token: fabric_api_token,
      build_secret: fabric_build_secret,
      notes: truncate(text: change_log_since_last_tag, length: 16384, omission: ''),
      groups: options[:groups],
    )
  end

  private_lane :build_itunes do |options|
    match(type: "appstore", readonly: true)
    gym(scheme: options[:scheme], include_bitcode: true)
    upload_itunes
    refresh_dsyms(version: get_version_number)
  end

  desc "Uploads the build to iTunes Connect"
  private_lane :upload_itunes do
    pilot(
      skip_submission: true,
      team_id: itunes_team_id,
      skip_waiting_for_build_processing: true
    )
  end

  desc "Commits a build version bump to Github"
  private_lane :build_number_bump do |options|
    commit_version_bump(message: "[skip ci] Build number bump to #{options[:build_number]}")
  end

  desc "Create a git tag"
  private_lane :tag do |options|
    begin
      push_to_git_remote(remote_branch: branch)

      version_number = get_version_number
      build_number = get_build_number

      add_git_tag(
        tag: "#{options[:build_type]}/#{tag_name(version_number, build_number)}",
        message: change_log_since_last_tag
      )

      push_git_tags
    rescue => ex
      slack_msg(msg: ex.message, success: false)
    end
  end

  desc "Executes sh in project root"
  private_lane :root_sh do |options|
    sh("cd .. && #{options[:command]}")
  end

  desc "Will send a slack message to #mobile"
  private_lane :slack_msg do |options|
    if is_ci
      slack(
        channel: "mobile-ci",
        payload: {
          'Message' => commit[:message],
          'Author' => commit[:author],
          'Commit' => commit_url(commit),
          'Build' => build_url
        },
        default_payloads: [],
        message: options[:msg],
        success: options[:success])
    end
  end

  # Accessors
  def build_url
    if ENV['CI_PROJECT_URL']
      return "#{ENV['CI_PROJECT_URL']}/builds/#{ENV['CI_BUILD_ID']}"
    end
    return "n/a"
  end

  def commit_url(commit)
    if ENV['CI_PROJECT_URL']
      return "#{ENV['CI_PROJECT_URL']}/commit/#{commit[:commit_hash]}"
    end
    return "n/a"
  end

   def fabric_build_secret
    return ENV["FABRIC_BUILD_SECRET"]
  end

  def fabric_api_token
    return ENV["FABRIC_API_TOKEN"]
  end

  def branch
    return ENV["CI_COMMIT_REF_NAME"] if ENV["CI_COMMIT_REF_NAME"]
    git_branch
  end

  def change_log_since_last_tag
    # http://git-scm.com/docs/pretty-formats
    # <short hash> <commit title>
    changelog_from_git_commits(pretty: '%h %s') || "No Changelog"
  end

  def version_string(version_number, build_number)
     "#{version_number} (#{build_number})"
   end

   def tag_name(version_name, version_code)
     "#{version_name}/#{version_code}"
   end

  def itunes_team_id
    ENV["ITUNES_TEAM_ID"]
  end

  def fabric_groups_for_scheme(scheme)
    return mobile_fabric_groups if scheme == mobile_scheme
    return staging_fabric_groups if scheme == staging_scheme
    default_fabric_groups
  end

  def default_fabric_groups
    ["ios-devs", "ios-beta"]
  end

  def mobile_fabric_groups
    ["ios-devs"]
  end

  def staging_fabric_groups
    ["ios-devs", "ios-security-check"]
  end

  def all_app_ids
    [app_id, mobile_app_id, staging_app_id]
  end

  def app_id_for_scheme(scheme)
    return mobile_app_id if scheme == mobile_scheme
    return staging_app_id if scheme == staging_scheme
    app_id
  end

  def app_id
    ENV["APP_ID"]
  end

  def mobile_app_id
    "#{app_id}.mobile"
  end

  def staging_app_id
    "#{app_id}.staging"
  end

  def production_scheme
    "Unbabel"
  end

  def mobile_scheme
    "UnbabelMobile"
  end

  def staging_scheme
    "UnbabelStaging"
  end

  def appstore_scheme
    "UnbabelAppStore"
  end

  def truncate(options)
    raise 'Pleasant: Length should be greater than omission length' unless options[:length] > options[:omission].length

    truncated_string = options[:text].to_s
    if truncated_string.length > options[:length]
      truncated_string = truncated_string[0...(options[:length] - options[:omission].length)]
      truncated_string += options[:omission]
    end
    truncated_string
  end


  # This lane is called, only if the executed lane was successful
  after_all do |lane|
    if !is_ci
      notification(message: "Fastlane finished '#{lane}' successfully") # Mac OS X Notification
    end
      slack_msg(msg: "#{run_location} successfully distributed Unbabel into #{lane} :rocket:", success: true)
  end

  error do |lane, exception|
    if !is_ci
      notification(message: "Fastlane '#{lane}' errored") # Mac OS X Notification
    end
    slack_msg(msg:  "#{run_location} failed #{exception.to_s}", success: false)
  end
end
